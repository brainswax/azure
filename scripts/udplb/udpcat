#! /usr/bin/env python3
import socket
import sys
import argparse
import time

def main():
    # Set up argument parser
    parser = argparse.ArgumentParser(description="UDP client similar to netcat")
    parser.add_argument("host", help="Server IP address or hostname")
    parser.add_argument("port", type=int, help="Server port number")
    parser.add_argument("-w", "--timeout", type=int, default=1000,
                       help="Timeout in milliseconds for receiving response (default: 1000)")

    # Parse arguments
    args = parser.parse_args()
    host = args.host
    port = args.port
    timeout = args.timeout / 1000.0  # Convert milliseconds to seconds for socket timeout

    # Read message from standard input
    message = sys.stdin.read().strip()
    if not message:
        print("Error: No message provided on standard input", file=sys.stderr)
        sys.exit(1)

    # Create UDP socket
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        sock.settimeout(timeout)  # Set timeout for receiving response
    except socket.error as e:
        print(f"Error creating socket: {e}", file=sys.stderr)
        sys.exit(1)

    # Send message to server
    try:
        sock.sendto(message.encode('utf-8'), (host, port))
        # print(f"Sent message to {host}:{port}: {message}")
    except socket.error as e:
        print(f"Error sending message: {e}", file=sys.stderr)
        sock.close()
        sys.exit(1)

    # Wait for response
    try:
        data, addr = sock.recvfrom(1024)  # Buffer size of 1024 bytes
        response = data.decode('utf-8')
        print(response)  # Print response to stdout
    except socket.timeout:
        print(f"Error: No response received within {args.timeout}ms", file=sys.stderr)
        sys.exit(1)
    except socket.error as e:
        print(f"Error receiving response: {e}", file=sys.stderr)
        sys.exit(1)
    finally:
        sock.close()

if __name__ == "__main__":
    main()