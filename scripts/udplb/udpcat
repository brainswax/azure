#! /usr/bin/env python3
import socket
import sys
import argparse
import time
import datetime
import os
import select

def create_socket(blocking):
    """Create and bind a UDP socket, set to blocking or non-blocking."""
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        sock.setblocking(blocking)  # Set blocking or non-blocking mode
        # Bind to a random available local port
        sock.bind(('0.0.0.0', 0))
        local_port = sock.getsockname()[1]  # Get the assigned local port
        return sock, local_port
    except socket.error as e:
        print(f"Error creating socket: {e}", file=sys.stderr)
        sys.exit(1)

def main():
    # Set up argument parser
    parser = argparse.ArgumentParser(description="UDP client similar to netcat")
    parser.add_argument("host", help="Server IP address or hostname")
    parser.add_argument("port", type=int, help="Server port number")
    parser.add_argument("-w", "--timeout", type=int, default=1000,
                       help="Timeout in milliseconds for receiving response (0 for no timeout, default: 1000)")
    parser.add_argument("-c", "--count", type=int, default=1,
                       help="Number of UDP messages to send (0 for indefinite, default: 1)")
    parser.add_argument("-i", "--interval", type=int, default=1000,
                       help="Interval between messages in milliseconds (default: 1000)")
    parser.add_argument("-l", "--logfile", nargs='?', const="udpcat.log",
                       help="File to log responses with timestamps (default: udpcat.log)")
    parser.add_argument("-b", "--blocking", action="store_true",
                       help="Use blocking socket mode (default: non-blocking)")

    # Parse arguments
    args = parser.parse_args()
    host = args.host
    port = args.port
    timeout = None if args.timeout == 0 else args.timeout / 1000.0  # 0 means no timeout, else ms to s
    count = args.count
    interval = args.interval / 1000.0  # Convert milliseconds to seconds
    logfile = args.logfile
    blocking = args.blocking

    # Read message from standard input, use empty string if none provided
    input_message = sys.stdin.read().strip() if not sys.stdin.isatty() else ""

    # Create UDP socket
    sock, local_port = create_socket(blocking)

    # Send messages
    sent_count = 0
    last_send_time = time.time()
    response_expected = False  # Track if a response is expected for the current message
    while count == 0 or sent_count < count:
        try:
            # Check if it's time to send the next message
            current_time = time.time()
            if current_time - last_send_time >= interval:
                # Use input_message if provided, otherwise use the current counter (starting from 1)
                message = input_message if input_message else str(sent_count + 1)
                # Send message to server
                sock.sendto(message.encode('utf-8'), (host, port))
                print(f"Sent message to {host}:{port} from 0.0.0.0:{local_port}: {message}")
                sent_count += 1
                last_send_time = current_time
                response_expected = True  # Expect a response for this message

            # Check for response
            if blocking:
                # Blocking mode: use recvfrom with timeout (if set)
                if timeout is not None:
                    sock.settimeout(timeout)
                try:
                    data, addr = sock.recvfrom(1024)  # Buffer size of 1024 bytes
                    response = data.decode('utf-8')
                    print(response)  # Print response to stdout
                    if logfile:
                        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")
                        log_entry = f"[{timestamp}] Received from {addr[0]}:{addr[1]}: {response}\n"
                        with open(logfile, 'a') as f:
                            f.write(log_entry)
                    response_expected = False  # Response received
                except socket.timeout:
                    error_msg = f"No response received within {args.timeout}ms"
                    print(error_msg, file=sys.stderr)
                    if logfile:
                        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")
                        log_entry = f"[{timestamp}] {error_msg}\n"
                        with open(logfile, 'a') as f:
                            f.write(log_entry)
                    response_expected = False  # Timeout handled
                except socket.error as e:
                    error_msg = f"Error receiving response: {e}"
                    print(error_msg, file=sys.stderr)
                    if logfile:
                        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")
                        log_entry = f"[{timestamp}] {error_msg}\n"
                        with open(logfile, 'a') as f:
                            f.write(log_entry)
                    response_expected = False  # Error handled
            else:
                # Non-blocking mode: use select to check for data
                if response_expected:
                    readable, _, _ = select.select([sock], [], [], timeout or 0)
                    if sock in readable:
                        try:
                            data, addr = sock.recvfrom(1024)  # Buffer size of 1024 bytes
                            response = data.decode('utf-8')
                            print(response)  # Print response to stdout
                            if logfile:
                                timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")
                                log_entry = f"[{timestamp}] Received from {addr[0]}:{addr[1]}: {response}\n"
                                with open(logfile, 'a') as f:
                                    f.write(log_entry)
                            response_expected = False  # Response received
                        except socket.error as e:
                            error_msg = f"Error receiving response: {e}"
                            print(error_msg, file=sys.stderr)
                            if logfile:
                                timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")
                                log_entry = f"[{timestamp}] {error_msg}\n"
                                with open(logfile, 'a') as f:
                                    f.write(log_entry)
                            response_expected = False  # Error handled
                    elif timeout is not None and readable == []:
                        error_msg = f"No response received within {args.timeout}ms"
                        print(error_msg, file=sys.stderr)
                        if logfile:
                            timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")
                            log_entry = f"[{timestamp}] {error_msg}\n"
                            with open(logfile, 'a') as f:
                                f.write(log_entry)
                        response_expected = False  # Timeout handled

            # Avoid busy looping in non-blocking mode
            if (count == 0 or sent_count < count) and not blocking:
                time.sleep(min(interval / 10, 0.01))  # Brief sleep to reduce CPU usage
        except socket.error as e:
            print(f"Error sending message: {e}", file=sys.stderr)
            if logfile:
                timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")
                log_entry = f"[{timestamp}] Error sending message to {host}:{port}: {e}\n"
                with open(logfile, 'a') as f:
                    f.write(log_entry)
            break
        except KeyboardInterrupt:
            print("\nStopped by user", file=sys.stderr)
            if logfile:
                timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")
                log_entry = f"[{timestamp}] Stopped by user\n"
                with open(logfile, 'a') as f:
                    f.write(log_entry)
            break

    sock.close()

if __name__ == "__main__":
    main()
